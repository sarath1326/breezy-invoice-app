scalar ObjectId
scalar Upload


type Mutation {
  createCouponsByAdmin(input:createCouponsByAdminInput!):createCouponsByAdminResponse!
   adminSuspendTheCupone(input:adminSuspendTheCuponeInput):adminSuspendTheCuponeResponse!
   adminDeleteTheCoupon(input:adminDeleteTheCouponInput!):adminDeleteTheCouponResponse!
}

type Query{
      getAllCoupenToAdmin(input:getAllCoupenToAdminInput!):adminDeleteTheCouponResponse!
}


input Categoryvalid {
  category: ObjectId
}

type CategoryvalidType {
  category: ObjectId
}

input Productvalid {
  product: ObjectId
}

type ProductvalidType {
  product: ObjectId
}

input Uservalid {
  user: ObjectId
}

type UservalidType {
  user: ObjectId
}

input Brandvalid{
  brand:ObjectId
}

type BrandvalidType{
  brand:ObjectId
}

input adminDeleteTheCouponInput{ 

       _id:ObjectId
}

type adminDeleteTheCouponResponse{

     status:Boolean,
     msg:String
}


input createCouponsByAdminInput{
    name:String!
    code:String!
    description:String
    # couponType: String!
    orderCount:Int
    discountType: String!
    couponApplicableType: String
    discountValue: Float
    max_discount: Float
    minOrderAmount: Float
    validCategories: [Categoryvalid]
    validProducts: [Productvalid]
    validUsers: [Uservalid]
    validBrands: [Brandvalid]
    usageLimit: Int
    usagePerUserLimit: Int
    startDate: Date
    expiryDate: Date
}

type createCouponsByAdminResponse{
    success:Boolean
    message:String
}



input adminSuspendTheCuponeInput{

     _id:ObjectId,
     isActive:Boolean
}

type adminSuspendTheCuponeResponse{

      status:Boolean,
      msg:String
}


type getAllCoupenToAdminResponse{

      records: [Coupon ],
     maxRecords: Int
}

input getAllCoupenToAdminInput{

    page:Int
    size:Int
    isActive:Boolean
    startDate:Date
    expiryDate:Date


}

type Coupon{

      name:String
    code:String
    description:String
    # couponType: String!
    orderCount:Int
    discountType: String
    couponApplicableType: String
    discountValue: Float
    max_discount: Float
    minOrderAmount: Float
    validCategories: [CategoryvalidType]
    validProducts: [ProductvalidType]
    validUsers: [UservalidType]
    validBrands: [BrandvalidType]
    usageLimit: Int
    usagePerUserLimit: Int
    startDate: Date
    expiryDate: Date
}


type ValidCategory {
 
 catogory:ObjectId
 
}

type ValidProduct {
    products:ObjectId
}

type ValidUser {
   
    user:ObjectId
}

type UserUsageLimit {
  userId: ObjectId
  usageCount: Int
}
